name: CI

on:
  pull_request:
    branches:
      - master
  workflow_dispatch:  # Allows manual triggering of the workflow

jobs:
  setup:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.8.18'

      - name: Install dependencies
        run: |
          pip install poetry
          poetry install -v --with dev
          poetry run pre-commit install

      # Cache the virtual environment and checkout
      - name: Cache environment
        uses: actions/cache@v2
        with:
          path: |
            .venv
            ~/.cache/pip
          key: ${{ runner.os }}-python-${{ hashFiles('**/poetry.lock') }}

  lint:
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Reuse cache
        uses: actions/cache@v2
        with:
          path: |
            .venv
            ~/.cache/pip
          key: ${{ runner.os }}-python-${{ hashFiles('**/poetry.lock') }}

      - name: Run linters
        run: make lint

  test:
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Reuse cache
        uses: actions/cache@v2
        with:
          path: |
            .venv
            ~/.cache/pip
          key: ${{ runner.os }}-python-${{ hashFiles('**/poetry.lock') }}

      - name: Configure monitor
        run: |
          mkdir -p ~/.config
          cp monitor.example-config.yaml ~/.config/monitor.yaml

      - name: Run tests
        run: |
          docker compose up -d
          make test
          docker compose down

      - name: Clean up
        if: always()
        run: rm -f ~/.config/monitor.yaml
